import datetime

from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger

from states.states import AddAndDelBadWords, AddUserStates
from system.dispatcher import bot
from system.dispatcher import router
from system.sqlite import writing_bad_words_to_the_database, record_the_id_of_allowed_users


@router.message(Command("id"))
async def send_id(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É '/id' –≤ —á–∞—Ç–µ {message.chat.id}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    chat_member = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
    if chat_member.status not in ["administrator", "creator"]:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        await bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /id
        return
    try:
        # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ ID
        user = await bot.get_chat(message.reply_to_message.from_user.id)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ID, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–∫—É
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name}\nID: {user.id}')
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /id
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except AttributeError:
        # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ AttributeError, —Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id=message.chat.id, text='–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ ID')


@router.message(Command("user_add"))
async def cmd_user_add(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /user_add. –ö–æ–º–∞–Ω–¥–∞ /user_add –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É '/user_add' –≤ —á–∞—Ç–µ {message.chat.id}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    chat_member = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
    if chat_member.status not in ["administrator", "creator"]:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        await bot.send_message(message.chat.id, "<code>‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</code>",
                               parse_mode="HTML")
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /user_add
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Å–æ–±—ã—Ö –ø—Ä–∞–≤ –≤ –≥—Ä—É–ø–ø–µ')
    await state.set_state(AddUserStates.WAITING_FOR_USER_ID)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_FOR_USER_ID
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /user_add


@router.message(AddUserStates.WAITING_FOR_USER_ID)
async def process_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        chat_member = await bot.get_chat_member(message.chat.id, int(message.text))
        record_the_id_of_allowed_users(
            chat_id=message.chat.id,  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
            user_id=int(message.text),  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–æ–º ID
            username=chat_member.user.username if chat_member.user.username else "",
            first_name=chat_member.user.first_name if chat_member.user.first_name else "",
            last_name=chat_member.user.last_name if chat_member.user.last_name else "",
            date_add=datetime.datetime.now(),
            admin_id=message.from_user.id,  # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –±–æ—Ç—É
            chat_title=message.chat.title  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        )  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —á–∞—Ç
        await message.answer(
            f"<code>‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫—É {chat_member.user.first_name if chat_member.user.first_name else ""} {chat_member.user.last_name if chat_member.user.last_name else ""} "
            f"–¥–∞–Ω—ã –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ</code>", parse_mode="HTML")
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    except ValueError:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —á–∏—Å–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤–≤–æ–¥–æ–º


@router.message(Command("add_bad"))
async def cmd_add_bad(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_bad"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–ª –ª–∏ –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω —á–∞—Ç–∞
    if message.from_user.id == 535185511:  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer(
            '‚úíÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ‚ûï –≤ —Å–ø–∏—Å–æ–∫ üìù –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ ü§¨: ',
            parse_mode="HTML"
        )
        await state.set_state(AddAndDelBadWords.waiting_for_bad_word)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–æ—Ö–æ–≥–æ —Å–ª–æ–≤–∞
    else:
        await message.reply('–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.')


@router.message(AddAndDelBadWords.waiting_for_bad_word)
async def process_bad_word(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–æ—Ö–æ–≥–æ —Å–ª–æ–≤–∞"""
    writing_bad_words_to_the_database(
        bad_word=message.text.strip().lower(),  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id=message.from_user.id,  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username=message.from_user.username,  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_full_name=message.from_user.full_name,  # –ü–æ–ª—É—á–∞–µ–º –§.–ò. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id=message.chat.id,  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ / –∫–∞–Ω–∞–ª–∞
        chat_title=message.chat.title  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ / –∫–∞–Ω–∞–ª–∞
    )  # –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞
    await message.reply('‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚ûï –≤ —Å–ø–∏—Å–æ–∫ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ ü§¨.', parse_mode="HTML")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

import sqlite3
import asyncio
from aiogram.enums import ChatMemberStatus
from aiogram.filters import Command
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, JOIN_TRANSITION
from aiogram.types import Message, ChatMemberUpdated
from loguru import logger

from system.dispatcher import bot
from system.dispatcher import router
from system.sqlite import path_database

async def delete_message_after_delay(message: Message, delay: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@router.message(Command("setchannel"))
async def set_channel(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setchannel"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É '/setchannel' –≤ —á–∞—Ç–µ {message.chat.id}")
    if message.chat.type not in ['group', 'supergroup']:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if chat_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return

    try:
        args = message.text.split()
        if len(args) != 2 or not args[1].startswith('@'):
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setchannel @username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @vkysno_i_prossto)")
            return

        channel_username = args[1]
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ username
        chat = await bot.get_chat(channel_username)
        channel_id = chat.id

        conn = sqlite3.connect(path_database)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS group_restrictions
                             (group_id INTEGER PRIMARY KEY, required_channel_id INTEGER, required_channel_username TEXT)''')
        c.execute('INSERT OR REPLACE INTO group_restrictions (group_id, required_channel_id, required_channel_username) VALUES (?, ?, ?)',
                  (message.chat.id, channel_id, channel_username))
        conn.commit()
        conn.close()

        await message.reply(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–Ω–∞–ª {channel_username} –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ username –∫–∞–Ω–∞–ª–∞ –≤–µ—Ä–Ω—ã–π –∏ –±–æ—Ç –∏–º–µ–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø")

@router.message()
async def check_subscription(message: Message):
    if message.chat.type not in ['group', 'supergroup']:
        return

    try:
        conn = sqlite3.connect(path_database)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS group_restrictions
                                     (group_id INTEGER PRIMARY KEY, required_channel_id INTEGER, required_channel_username TEXT)''')
        c.execute('SELECT required_channel_id, required_channel_username FROM group_restrictions WHERE group_id = ?', (message.chat.id,))
        result = c.fetchone()
        conn.close()

        if not result:
            return

        required_channel_id, required_channel_username = result

        member = await bot.get_chat_member(required_channel_id, message.from_user.id)
        if member.status not in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await message.delete()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –æ–±—ä–µ–∫—Ç
            bot_message = await message.answer(
                f"{message.from_user.mention_html()}, –ø—Ä–∏–≤–µ—Ç! üëã –ß—Ç–æ–±—ã –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å —É—é—Ç–Ω–æ–π –∏ —Å–≤–æ–±–æ–¥–Ω–æ–π –æ—Ç —Å–ø–∞–º–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {required_channel_username} ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç. ü§ñ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å, –∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ä–∞. –°–ø–∞—Å–∏–±–æ, –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üåü",
                parse_mode="HTML"
            )
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(delete_message_after_delay(bot_message, 60))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.delete()
        user_mention = message.from_user.mention_html() if message.from_user.username else f"User {message.from_user.id}"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–∑ –±–∞–∑—ã –∏–ª–∏ ID, –µ—Å–ª–∏ username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        conn = sqlite3.connect(path_database)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS group_restrictions
                                     (group_id INTEGER PRIMARY KEY, required_channel_id INTEGER, required_channel_username TEXT)''')
        c.execute('SELECT required_channel_username FROM group_restrictions WHERE group_id = ?', (message.chat.id,))
        result = c.fetchone()
        conn.close()
        channel_username = result[0] if result else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –æ–±—ä–µ–∫—Ç
        bot_message = await message.answer(
            f"{user_mention}, –ø—Ä–∏–≤–µ—Ç! üëã –ß—Ç–æ–±—ã –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å —É—é—Ç–Ω–æ–π –∏ —Å–≤–æ–±–æ–¥–Ω–æ–π –æ—Ç —Å–ø–∞–º–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_username} ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç. ü§ñ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å, –∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ä–∞. –°–ø–∞—Å–∏–±–æ, –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üåü",
            parse_mode="HTML"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(delete_message_after_delay(bot_message, 60))

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION))
async def on_chat_member_update(update: ChatMemberUpdated):
    if update.new_chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR]:
        try:
            conn = sqlite3.connect(path_database)
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS group_restrictions
                                         (group_id INTEGER PRIMARY KEY, required_channel_id INTEGER, required_channel_username TEXT)''')
            c.execute('SELECT group_id FROM group_restrictions WHERE required_channel_id = ?', (update.chat.id,))
            groups = c.fetchall()
            conn.close()

            for group in groups:
                try:
                    member = await bot.get_chat_member(group[0], update.user.id)
                    if member.status == ChatMemberStatus.RESTRICTED:
                        await bot.restrict_chat_member(
                            group[0],
                            update.user.id,
                            can_send_messages=True
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group[0]}: {e}")
                    continue
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


def register_admin_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    router.message.register(cmd_add_bad)
    router.message.register(cmd_user_add)
    router.message.register(set_channel)


if __name__ == '__main__':
    register_admin_handlers()
